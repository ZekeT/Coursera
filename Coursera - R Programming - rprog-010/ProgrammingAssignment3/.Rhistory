source('~/.active-rstudio-document')
data <- data.frame(read.csv(C:/Users/ezetee/Documents/Coursera - Getting and Cleaning Data - getdata-010/getdata-data-ss06hid.csv))
data <- data.frame(read.csv("C:/Users/ezetee/Documents/Coursera - Getting and Cleaning Data - getdata-010/getdata-data-ss06hid.csv"))
head(data)
data$val
data$val = 24
data$val == 24
sum(data$val == 24)
sum(!is.na(data$VAL[data$VAL==24]))
head(data)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
set.seed(1)
rpois(5, 2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5, 2)
?rnorm
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?rep
y
y
y
?rnorm
library(swril)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!5=7
!(5==7)
! 5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
getwd()
setwd("C:/Users/ezetee/Documents/Coursera - R Programming - rprog-010/ProgrammingAssignment3")
## Read outcome data
filename <- "outcome-of-care-measures.csv"
data <- read.csv(filename, colClasses = "character",na.strings="Not Available")
# data frames
df <- data.frame()
# sample inputs
outcome <- "heart attack"
num <- 20
## Check that outcome is valid
validOutcome <- c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) stop("invalid outcome")
if (outcome == "heart attack") outcomeColNum <- 11
if (outcome == "heart failure") outcomeColNum <- 17
if (outcome == "pneumonia") outcomeColNum <- 23 #pneumonia
## For each state, find the hospital of the given rank
states <- sort(unique(data[,7]))
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- c(sorted[num,]$Hospital.Name, i)
#print(x)
df <- rbind(x,df)
}
View(df)
## Read outcome data
filename <- "outcome-of-care-measures.csv"
data <- read.csv(filename, colClasses = "character",na.strings="Not Available",stringsAsFactors=F)
# data frames
df <- data.frame()
# sample inputs
outcome <- "heart attack"
num <- 20
## Check that outcome is valid
validOutcome <- c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) stop("invalid outcome")
if (outcome == "heart attack") outcomeColNum <- 11
if (outcome == "heart failure") outcomeColNum <- 17
if (outcome == "pneumonia") outcomeColNum <- 23 #pneumonia
## For each state, find the hospital of the given rank
states <- sort(unique(data[,7]))
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- c(sorted[num,]$Hospital.Name, i)
#print(x)
df <- rbind(df,x)
}
View(df)
## Read outcome data
filename <- "outcome-of-care-measures.csv"
data <- read.csv(filename, colClasses = "character",na.strings="Not Available")
# data frames
df <- data.frame()
# sample inputs
outcome <- "heart attack"
num <- 20
## Check that outcome is valid
validOutcome <- c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) stop("invalid outcome")
if (outcome == "heart attack") outcomeColNum <- 11
if (outcome == "heart failure") outcomeColNum <- 17
if (outcome == "pneumonia") outcomeColNum <- 23 #pneumonia
## For each state, find the hospital of the given rank
states <- sort(unique(data[,7]))
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- c(as.factor(sorted[num,]$Hospital.Name), i)
#print(x)
df <- rbind(df,x)
}
warnings()
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- as.factor(c(sorted[num,]$Hospital.Name, i))
#print(x)
df <- rbind(df,x)
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- c(sorted[num,]$Hospital.Name, i)
#print(x)
df <- rbind(df,as.factor(x))
}
?lapply''
?lapply
filename <- "outcome-of-care-measures.csv"
data <- read.csv(filename, colClasses = "character",na.strings="Not Available")
data_by_state <- split(data[, c("Hospital.Name", "State", column)], data$State)
data_by_state <- split(data[, c("Hospital.Name", "State", 11)], data$State)
## Read outcome data
filename <- "outcome-of-care-measures.csv"
data <- read.csv(filename, colClasses = "character",na.strings="Not Available")
# data frames
df <- data.frame()
# sample inputs
outcome <- "heart attack"
num <- 20
## Check that outcome is valid
validOutcome <- c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) stop("invalid outcome")
if (outcome == "heart attack") outcomeColNum <- 11
if (outcome == "heart failure") outcomeColNum <- 17
if (outcome == "pneumonia") outcomeColNum <- 23 #pneumonia
## For each state, find the hospital of the given rank
states <- sort(unique(data[,7]))
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- c(sorted[num,]$Hospital.Name, i)
#print(x)
df <- append(df,x)
}
df
df[1]
df[[1]]
df[2]
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- c(sorted[num,]$Hospital.Name, i)
#print(x)
df <- rbind(df,x)
}
View(df)
rm(df)
## Read outcome data
filename <- "outcome-of-care-measures.csv"
data <- read.csv(filename, colClasses = "character",na.strings="Not Available")
# data frames
df <- data.frame()
# sample inputs
outcome <- "heart attack"
num <- 20
## Check that outcome is valid
validOutcome <- c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) stop("invalid outcome")
if (outcome == "heart attack") outcomeColNum <- 11
if (outcome == "heart failure") outcomeColNum <- 17
if (outcome == "pneumonia") outcomeColNum <- 23 #pneumonia
## For each state, find the hospital of the given rank
states <- sort(unique(data[,7]))
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- c(sorted[num,]$Hospital.Name, i)
#print(x)
df <- rbind(df,x)
}
View(df)
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- c(sorted[num,]$Hospital.Name, i)
#print(x)
df <- rbind(as.character(df),as.character(x))
}
rm(df)
## Read outcome data
filename <- "outcome-of-care-measures.csv"
data <- read.csv(filename, colClasses = "character",na.strings="Not Available")
# data frames
df <- data.frame()
# sample inputs
outcome <- "heart attack"
num <- 20
## Check that outcome is valid
validOutcome <- c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) stop("invalid outcome")
if (outcome == "heart attack") outcomeColNum <- 11
if (outcome == "heart failure") outcomeColNum <- 17
if (outcome == "pneumonia") outcomeColNum <- 23 #pneumonia
## For each state, find the hospital of the given rank
states <- sort(unique(data[,7]))
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- c(sorted[num,]$Hospital.Name, i)
#print(x)
df <- rbind(df,as.character(x))
}
## Read outcome data
filename <- "outcome-of-care-measures.csv"
data <- read.csv(filename, colClasses = "character",na.strings="Not Available")
# data frames
df <- data.frame()
# sample inputs
outcome <- "heart attack"
num <- 20
## Check that outcome is valid
validOutcome <- c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) stop("invalid outcome")
if (outcome == "heart attack") outcomeColNum <- 11
if (outcome == "heart failure") outcomeColNum <- 17
if (outcome == "pneumonia") outcomeColNum <- 23 #pneumonia
## For each state, find the hospital of the given rank
states <- sort(unique(data[,7]))
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- c(sorted[num,]$Hospital.Name, i)
#print(x)
df <- rbind(df,as.factor(x))
}
View(df)
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- c(sorted[num,]$Hospital.Name, i)
print(x)
df <- rbind(df,as.factor(x))
}
View(df)
df <- data.frame()
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- data.frame(sorted[num,]$Hospital.Name, i)
print(x)
df <- rbind(df,x)
}
View(df)
names(df)
colnames(df)<-"a"
names(df)
colnames(df)<-["a","b"]
names(df)
names(df)[,1] <- "a"
## Read outcome data
filename <- "outcome-of-care-measures.csv"
data <- read.csv(filename, colClasses = "character",na.strings="Not Available")
# data frames
df <- data.frame()
# sample inputs
outcome <- "heart attack"
num <- 20
## Check that outcome is valid
validOutcome <- c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) stop("invalid outcome")
if (outcome == "heart attack") outcomeColNum <- 11
if (outcome == "heart failure") outcomeColNum <- 17
if (outcome == "pneumonia") outcomeColNum <- 23 #pneumonia
## For each state, find the hospital of the given rank
states <- sort(unique(data[,7]))
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- data.frame(sorted[num,]$Hospital.Name, i)
df <- rbind(df,x)
}
names(df)
names(df)[,1] <- "a"
source('~/Coursera - R Programming - rprog-010/ProgrammingAssignment3/rankall.r', echo=TRUE)
head(rankall("heart attack", 20), 10)
source('~/Coursera - R Programming - rprog-010/ProgrammingAssignment3/rankall.r', echo=TRUE)
head(rankall("heart attack", 20), 10)
source('~/Coursera - R Programming - rprog-010/ProgrammingAssignment3/rankall.r', echo=TRUE)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
## Read outcome data
filename <- "outcome-of-care-measures.csv"
data <- read.csv(filename, colClasses = "character",na.strings="Not Available")
# data frames
df <- data.frame()
outcome <- "pneumonia"
num <- "worst"
## Check that outcome is valid
validOutcome <- c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) stop("invalid outcome")
if (outcome == "heart attack") outcomeColNum <- 11
if (outcome == "heart failure") outcomeColNum <- 17
if (outcome == "pneumonia") outcomeColNum <- 23 #pneumonia
## For each state, find the hospital of the given rank
states <- sort(unique(data[,7]))
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
print(num)
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- data.frame(sorted[num,]$Hospital.Name, i)
df <- rbind(df,x)
}
df <- data.frame()
outcome <- "pneumonia"
num <- "worst"
## Check that outcome is valid
validOutcome <- c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) stop("invalid outcome")
if (outcome == "heart attack") outcomeColNum <- 11
if (outcome == "heart failure") outcomeColNum <- 17
if (outcome == "pneumonia") outcomeColNum <- 23 #pneumonia
## For each state, find the hospital of the given rank
states <- sort(unique(data[,7]))
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
print(num, i)
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- data.frame(sorted[num,]$Hospital.Name, i)
df <- rbind(df,x)
}
# data frames
df <- data.frame()
outcome <- "pneumonia"
num <- "worst"
## Check that outcome is valid
validOutcome <- c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) stop("invalid outcome")
if (outcome == "heart attack") outcomeColNum <- 11
if (outcome == "heart failure") outcomeColNum <- 17
if (outcome == "pneumonia") outcomeColNum <- 23 #pneumonia
## For each state, find the hospital of the given rank
states <- sort(unique(data[,7]))
for (i in states){
stateSubset <- data[data[, 7]==i, ]
outcomeStateSubset <- stateSubset[!(is.na(stateSubset[,outcomeColNum])),]
if (num=="best") num <- 1
if (num=="worst") num <- length(outcomeStateSubset[,outcomeColNum])
print(i)
print(num)
sorted <- outcomeStateSubset[order(as.numeric(outcomeStateSubset[,outcomeColNum]), outcomeStateSubset[,2]),]
x <- data.frame(sorted[num,]$Hospital.Name, i)
df <- rbind(df,x)
}
source('~/.active-rstudio-document', echo=TRUE)
tail(rankall("pneumonia", "worst"), 3)
source("submitscript3.R")
submit()
source('~/Coursera - R Programming - rprog-010/ProgrammingAssignment3/rankall.r', echo=TRUE)
tail(rankall("pneumonia", "worst"), 3)
rankall("heart attack", 4)
source('~/.active-rstudio-document', echo=TRUE)
rankall("heart attack", 4)
submit()
submit()
submit()
